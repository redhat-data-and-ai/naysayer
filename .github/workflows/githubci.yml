name: github-actions

on:
  # Trigger on pull requests to any branch
  pull_request:
    branches: [ "*" ]
  # Trigger on pushes to main branch
  push:
    branches: [ "main" ]

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: '1.24.6'
        cache: true

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install golangci-lint
      run: |
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.54.2
        echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

    - name: Install dependencies
      run: make install

    - name: Run linting
      run: make lint

    - name: Run formatting check
      run: make fmt

    - name: Run go vet
      run: make vet

    - name: Run unit tests
      run: make test-unit

    - name: Generate test coverage (unit tests only)
      run: |
        mkdir -p coverage
        go test $(go list ./... | grep -v /e2e) -coverprofile=coverage/coverage.out -covermode=atomic

    - name: Build binary
      run: |
        echo "Building naysayer..."
        go mod download && go mod tidy && go mod vendor
        go build -o naysayer cmd/main.go
        echo "âœ… Built naysayer binary"

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage/coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
  # Additional job for security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: '1.24.6'

    - name: Run Gosec Security Scanner
      run: |
        go install github.com/securego/gosec/v2/cmd/gosec@latest
        gosec -fmt sarif -out gosec-results.sarif ./...
      continue-on-error: true

    - name: Upload Gosec results
      uses: actions/upload-artifact@v4
      with:
        name: gosec-results
        path: gosec-results.sarif
        if-no-files-found: warn
      if: always()

    - name: Run Go vulnerability scanner
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...

  # E2E testing job
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: '1.24.6'
        cache: true

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: make install

    - name: Run E2E tests
      run: make test-e2e

    - name: Upload E2E test artifacts on failure
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: e2e-test-results
        path: |
          e2e/testdata/
          e2e/*.log
        if-no-files-found: warn


